#!/usr/bin/env python3
"""
Script pour v√©rifier que l'admin a √©t√© cr√©√© correctement
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import SessionLocal, DBUser
from passlib.context import CryptContext

# Configuration du hachage des mots de passe
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """V√©rifie un mot de passe"""
    return pwd_context.verify(plain_password, hashed_password)

def verify_admin():
    """V√©rifie que l'admin existe et que le mot de passe fonctionne"""
    db = SessionLocal()
    
    try:
        # Rechercher l'admin
        admin = db.query(DBUser).filter(
            DBUser.email == "kallelahmed63@gmail.com"
        ).first()
        
        if not admin:
            print("‚ùå ERREUR: Admin non trouv√© dans la base de donn√©es")
            return False
        
        print("=" * 50)
        print("V√âRIFICATION DE L'ADMIN")
        print("=" * 50)
        print(f"ID: {admin.id}")
        print(f"Email: {admin.email}")
        print(f"R√¥le: {admin.role}")
        print(f"Pr√©nom: {admin.first_name}")
        print(f"Nom: {admin.last_name}")
        print(f"T√©l√©phone: {admin.phone}")
        print(f"Email v√©rifi√©: {admin.email_verified}")
        print(f"Date de cr√©ation: {admin.created_at}")
        print("=" * 50)
        
        # Tester le mot de passe
        password_test = "changeme007*"
        if verify_password(password_test, admin.password):
            print("‚úÖ Mot de passe v√©rifi√© avec succ√®s!")
        else:
            print("‚ùå ERREUR: Le mot de passe ne correspond pas")
            return False
        
        # V√©rifier le r√¥le
        if admin.role == "admin":
            print("‚úÖ R√¥le admin confirm√©!")
        else:
            print(f"‚ùå ERREUR: R√¥le incorrect ({admin.role})")
            return False
        
        print("=" * 50)
        print("üéâ TOUTES LES V√âRIFICATIONS SONT PASS√âES!")
        print("L'admin est pr√™t √† √™tre utilis√©.")
        print("=" * 50)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False
    finally:
        db.close()

if __name__ == "__main__":
    verify_admin() 